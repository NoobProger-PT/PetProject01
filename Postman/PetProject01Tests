{
	"info": {
		"_postman_id": "83cc4ff1-091b-48c0-a767-2699e78f53ff",
		"name": "PetProject01Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22454138"
	},
	"item": [
		{
			"name": "UserTest",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Create user with bad name 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"newMail@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with bad name 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Too many characters in user name\",\r\n    \"email\": \"newMail@mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with bad email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"User name\",\r\n    \"email\": \"not email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Name 1');\r",
											"    pm.expect(jsonData.email).to.eql('mail1@mail.mail');\r",
											"    pm.expect(jsonData.registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var start = moment();\r",
											"pm.environment.set('currentDateTime', start.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Name 1\",\r\n    \"email\": \"mail1@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/users/20",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"20"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var start = moment();\r",
											"pm.environment.set('currentDateTime', start.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Name 1');\r",
											"    pm.expect(jsonData.email).to.eql('mail1@mail.mail');\r",
											"    pm.expect(jsonData.registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/users/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"    pm.expect(jsonData.name).to.eql('Name 2');\r",
											"    pm.expect(jsonData.email).to.eql('mail2@mail.mail');\r",
											"    pm.expect(jsonData.registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var start = moment();\r",
											"pm.environment.set('currentDateTime', start.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Name 2\",\r\n    \"email\": \"mail2@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"    pm.expect(jsonData[0].name).to.eql('Name 1');\r",
											"    pm.expect(jsonData[0].email).to.eql('mail1@mail.mail');\r",
											"    pm.expect(jsonData[0].registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"\r",
											"    pm.expect(jsonData[1].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].name).to.eql('Name 2');\r",
											"    pm.expect(jsonData[1].email).to.eql('mail2@mail.mail');\r",
											"    pm.expect(jsonData[1].registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var start = moment();\r",
											"pm.environment.set('currentDateTime', start.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/users/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"    pm.expect(jsonData[0].name).to.eql('Name 1');\r",
											"    pm.expect(jsonData[0].email).to.eql('mail1@mail.mail');\r",
											"    pm.expect(jsonData[0].registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"\r",
											"    pm.expect(jsonData[1].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].name).to.eql('Name 2');\r",
											"    pm.expect(jsonData[1].email).to.eql('mail2@mail.mail');\r",
											"    pm.expect(jsonData[1].registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var start = moment();\r",
											"pm.environment.set('currentDateTime', start.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/users/several?ids=1,2",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"several"
									],
									"query": [
										{
											"key": "ids",
											"value": "1,2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"New Name Example\",\r\n    \"email\": \"theNewestMail@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/users/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('New Name 1');\r",
											"    pm.expect(jsonData.email).to.eql('newMail1@mail.mail');\r",
											"    pm.expect(jsonData.registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"New Name 1\",\r\n    \"email\": \"newMail1@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/users/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/users/20",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"20"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/users/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].name).to.eql('Name 2');\r",
											"    pm.expect(jsonData[0].email).to.eql('mail2@mail.mail');\r",
											"    pm.expect(jsonData[0].registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var start = moment();\r",
											"pm.environment.set('currentDateTime', start.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/users/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"users",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private",
					"item": [
						{
							"name": "Create user with bad name 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"newMail@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/private/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with bad name 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Too many characters in user name\",\r\n    \"email\": \"newMail@mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/private/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with bad email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"User name\",\r\n    \"email\": \"not email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/private/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Name 3');\r",
											"    pm.expect(jsonData.email).to.eql('mail3@mail.mail');\r",
											"    pm.expect(jsonData.registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var start = moment();\r",
											"pm.environment.set('currentDateTime', start.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Name 3\",\r\n    \"email\": \"mail3@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/private/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/users/20",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users",
										"20"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"\r",
											"var start = moment();\r",
											"pm.environment.set('currentDateTime', start.format('YYYY-MM-DD'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Name 3');\r",
											"    pm.expect(jsonData.email).to.eql('mail3@mail.mail');\r",
											"    pm.expect(jsonData.registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/users/3",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"New Name Example\",\r\n    \"email\": \"theNewestMail@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/private/users/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('New Name 3');\r",
											"    pm.expect(jsonData.email).to.eql('newMail3@mail.mail');\r",
											"    pm.expect(jsonData.registrationDate).to.eql(pm.environment.get('currentDateTime'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"New Name 3\",\r\n    \"email\": \"newMail3@mail.mail\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/private/users/3",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/private/users/20",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users",
										"20"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/private/users/3",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"users",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Public",
					"item": [
						{
							"name": "Get user with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/users/20",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"users",
										"20"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check user data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Name 2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/users/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"users",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "MpaaTest",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Cteate mpaa with bad name 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/mpaa",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cteate mpaa with bad name 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Too many characters\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/mpaa",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create mpaa 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Rating1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rating1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/mpaa",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create mpaa 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"    pm.expect(jsonData.name).to.eql('Rating2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rating2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/mpaa",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mpaa with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/mpaa/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mpaa 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Rating1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/mpaa/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all mpaas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"    pm.expect(jsonData[0].name).to.eql('Rating1');\r",
											"\r",
											"    pm.expect(jsonData[1].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].name).to.eql('Rating2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/mpaa/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change wrong mpaa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rating5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/mpaa/5",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change mpaa 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"    pm.expect(jsonData.name).to.eql('Rating9');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Rating9\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/mpaa/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete mpaa with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/mpaa/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete mpaa 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/mpaa/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all mpaas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].name).to.eql('Rating9');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/mpaa/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"mpaa",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private",
					"item": [
						{
							"name": "Get mpaa with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/mpaa/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"mpaa",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mpaa 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Rating9');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/mpaa/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"mpaa",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all mpaas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].name).to.eql('Rating9');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/mpaa/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"mpaa",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private",
					"item": [
						{
							"name": "Get mpaa with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/mpaa/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"mpaa",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mpaa 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Rating9');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/mpaa/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"mpaa",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all mpaas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check mpaa data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].name).to.eql('Rating9');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/mpaa/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"mpaa",
										"all"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GenreTest",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Cteate genre with bad name 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/genre",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cteate genre with bad name 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Too many characters in name of genre\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/genre",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create genre 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Genre 1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Genre 1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/genre",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create genre 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"    pm.expect(jsonData.name).to.eql('Genre 2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Genre 2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/genre",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get genre with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/genre/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get genre 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Genre 1');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/genre/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all genres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"    pm.expect(jsonData[0].name).to.eql('Genre 1');\r",
											"\r",
											"    pm.expect(jsonData[1].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].name).to.eql('Genre 2');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/genre/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change wrong genre",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Genre 100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/genre/5",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change genre 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"    pm.expect(jsonData.name).to.eql('Genre 110');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Genre 110\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/genre/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete genre with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/genre/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete genre 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/genre/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all genres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].name).to.eql('Genre 110');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/genre/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"genre",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private",
					"item": [
						{
							"name": "Get genre with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/genre/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"genre",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get genre 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Genre 110');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/genre/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"genre",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all genres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].name).to.eql('Genre 110');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/genre/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"genre",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private",
					"item": [
						{
							"name": "Get genre with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/genre/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"genre",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get genre 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Genre 110');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/genre/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"genre",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all genres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check genre data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].name).to.eql('Genre 110');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/genre/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"genre",
										"all"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "FilmTest",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Create with wrong name 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"Country\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong name 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Too many characters in film name is not available. You must reduce the film name, please.\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"Country\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong author 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"\",\r\n    \"country\": \"Country 1\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong author 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"Too many characters in author name\",\r\n    \"country\": \"Country 1\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong country 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong country 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"Too many characters in country name\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"Country\",\r\n    \"releaseDate\": \"\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong duration 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"Country\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": null,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong duration 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"Country\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": -20,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong genre",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"Country\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create with wrong mpaa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film\",\r\n    \"author\": \"Author\",\r\n    \"country\": \"Country\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": null,\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Film 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Film 1');\r",
											"    pm.expect(jsonData.author).to.eql('Author 1');\r",
											"    pm.expect(jsonData.country).to.eql('Country 1');\r",
											"    pm.expect(jsonData.duration).to.eql(60);\r",
											"    pm.expect(jsonData.mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData.genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData.releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film 1\",\r\n    \"author\": \"Author 1\",\r\n    \"country\": \"Country 1\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Film 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"    pm.expect(jsonData.name).to.eql('Film 2');\r",
											"    pm.expect(jsonData.author).to.eql('Author 2');\r",
											"    pm.expect(jsonData.country).to.eql('Country 2');\r",
											"    pm.expect(jsonData.duration).to.eql(60);\r",
											"    pm.expect(jsonData.mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData.genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData.releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film 2\",\r\n    \"author\": \"Author 2\",\r\n    \"country\": \"Country 2\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Film 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Film 1');\r",
											"    pm.expect(jsonData.author).to.eql('Author 1');\r",
											"    pm.expect(jsonData.country).to.eql('Country 1');\r",
											"    pm.expect(jsonData.duration).to.eql(60);\r",
											"    pm.expect(jsonData.mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData.mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData.genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData.genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData.releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all films",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"    pm.expect(jsonData[0].name).to.eql('Film 1');\r",
											"    pm.expect(jsonData[0].author).to.eql('Author 1');\r",
											"    pm.expect(jsonData[0].country).to.eql('Country 1');\r",
											"    pm.expect(jsonData[0].duration).to.eql(60);\r",
											"    pm.expect(jsonData[0].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[0].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[0].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[0].releaseDate).to.eql('2022-11-11');\r",
											"\r",
											"    pm.expect(jsonData[1].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].name).to.eql('Film 2');\r",
											"    pm.expect(jsonData[1].author).to.eql('Author 2');\r",
											"    pm.expect(jsonData[1].country).to.eql('Country 2');\r",
											"    pm.expect(jsonData[1].duration).to.eql(60);\r",
											"    pm.expect(jsonData[1].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[1].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[1].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[1].releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get several films",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"    pm.expect(jsonData[0].name).to.eql('Film 1');\r",
											"    pm.expect(jsonData[0].author).to.eql('Author 1');\r",
											"    pm.expect(jsonData[0].country).to.eql('Country 1');\r",
											"    pm.expect(jsonData[0].duration).to.eql(60);\r",
											"    pm.expect(jsonData[0].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[0].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[0].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[0].releaseDate).to.eql('2022-11-11');\r",
											"\r",
											"    pm.expect(jsonData[1].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].name).to.eql('Film 2');\r",
											"    pm.expect(jsonData[1].author).to.eql('Author 2');\r",
											"    pm.expect(jsonData[1].country).to.eql('Country 2');\r",
											"    pm.expect(jsonData[1].duration).to.eql(60);\r",
											"    pm.expect(jsonData[1].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[1].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[1].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[1].releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/several?ids=1,2",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"several"
									],
									"query": [
										{
											"key": "ids",
											"value": "1,2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by wrong film name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/search?name=pepaPig",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "pepaPig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"    pm.expect(jsonData[0].name).to.eql('Film 1');\r",
											"    pm.expect(jsonData[0].author).to.eql('Author 1');\r",
											"    pm.expect(jsonData[0].country).to.eql('Country 1');\r",
											"    pm.expect(jsonData[0].duration).to.eql(60);\r",
											"    pm.expect(jsonData[0].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[0].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[0].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[0].releaseDate).to.eql('2022-11-11');\r",
											"\r",
											"    pm.expect(jsonData[1].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].name).to.eql('Film 2');\r",
											"    pm.expect(jsonData[1].author).to.eql('Author 2');\r",
											"    pm.expect(jsonData[1].country).to.eql('Country 2');\r",
											"    pm.expect(jsonData[1].duration).to.eql(60);\r",
											"    pm.expect(jsonData[1].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[1].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[1].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[1].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[1].releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/search?name=fIlM",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "fIlM"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Film 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(1);\r",
											"    pm.expect(jsonData.name).to.eql('Film patched 1');\r",
											"    pm.expect(jsonData.author).to.eql('Author patched 1');\r",
											"    pm.expect(jsonData.country).to.eql('Country patched 1');\r",
											"    pm.expect(jsonData.duration).to.eql(60);\r",
											"    pm.expect(jsonData.mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData.genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData.releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Film patched 1\",\r\n    \"author\": \"Author patched 1\",\r\n    \"country\": \"Country patched 1\",\r\n    \"releaseDate\": \"2022-11-11\",\r\n    \"duration\": 60,\r\n    \"mpaa\": { \"id\": 2},\r\n    \"genres\": [{ \"id\": 2}]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/admin/films/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/222",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"222"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Film 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all films after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"    pm.expect(jsonData[0].name).to.eql('Film patched 1');\r",
											"    pm.expect(jsonData[0].author).to.eql('Author patched 1');\r",
											"    pm.expect(jsonData[0].country).to.eql('Country patched 1');\r",
											"    pm.expect(jsonData[0].duration).to.eql(60);\r",
											"    pm.expect(jsonData[0].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[0].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[0].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[0].releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/admin/films/all",
									"host": [
										"{{url}}"
									],
									"path": [
										"admin",
										"films",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private",
					"item": [
						{
							"name": "Get by wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/films/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"films",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Film 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Film patched 1');\r",
											"    pm.expect(jsonData.author).to.eql('Author patched 1');\r",
											"    pm.expect(jsonData.country).to.eql('Country patched 1');\r",
											"    pm.expect(jsonData.duration).to.eql(60);\r",
											"    pm.expect(jsonData.mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData.mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData.genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData.genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData.releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/films/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"films",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by wrong film name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/films/search?name=doom",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"films",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "doom"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].name).to.eql('Film patched 1');\r",
											"    pm.expect(jsonData[0].author).to.eql('Author patched 1');\r",
											"    pm.expect(jsonData[0].country).to.eql('Country patched 1');\r",
											"    pm.expect(jsonData[0].duration).to.eql(60);\r",
											"    pm.expect(jsonData[0].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[0].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[0].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[0].releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/private/films/search?name=fIlM",
									"host": [
										"{{url}}"
									],
									"path": [
										"private",
										"films",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "fIlM"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Public",
					"item": [
						{
							"name": "Get by wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/films/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"films",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Film 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql('Film patched 1');\r",
											"    pm.expect(jsonData.author).to.eql('Author patched 1');\r",
											"    pm.expect(jsonData.country).to.eql('Country patched 1');\r",
											"    pm.expect(jsonData.duration).to.eql(60);\r",
											"    pm.expect(jsonData.mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData.mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData.genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData.genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData.releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/films/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"films",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by wrong film name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/films/search?name=pepaPig",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"films",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "pepaPig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"\r",
											"pm.test(\"Check film data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData[0].name).to.eql('Film patched 1');\r",
											"    pm.expect(jsonData[0].author).to.eql('Author patched 1');\r",
											"    pm.expect(jsonData[0].country).to.eql('Country patched 1');\r",
											"    pm.expect(jsonData[0].duration).to.eql(60);\r",
											"    pm.expect(jsonData[0].mpaa.id).to.eql(2);\r",
											"    pm.expect(jsonData[0].mpaa.name).to.eql('Rating9');\r",
											"    pm.expect(jsonData[0].genres[0].id).to.eql(2);\r",
											"    pm.expect(jsonData[0].genres[0].name).to.eql('Genre 110');\r",
											"    pm.expect(jsonData[0].releaseDate).to.eql('2022-11-11');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/public/films/search?name=fIlM",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"films",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "fIlM"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}